import Foundation

// Product Structure
struct Product {
    let id: String
    let name: String
    let price: Double
    let category: Category
    let description: String
    
    // –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞
    enum Category {
        case electronics, clothing, food, books
    }
    
    // –í—ã–≤–æ–¥ —Ü–µ–Ω—ã —Å —Å–∏–º–≤–æ–ª–æ–º $
    var displayPrice: String {
        return String(format: "$%.2f", price)
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä (–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä)
    init(id: String = UUID().uuidString,
         name: String,
         price: Double,
         category: Category,
         description: String) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è
        guard price > 0 else {
            fatalError("Price must be positive")
        }
        self.id = id
        self.name = name
        self.price = price
        self.category = category
        self.description = description
    }
}

// CartItem Structure
// CartItem ‚Äî —ç—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã (—Ç–æ–≤–∞—Ä + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
struct CartItem {
    let product: Product
    private(set) var quantity: Int
    
    // –ü–æ–¥—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    var subtotal: Double {
        return product.price * Double(quantity)
    }
    
    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    mutating func updateQuantity(_ newQuantity: Int) {
        guard newQuantity > 0 else {
            print("Quantity must be greater than 0")
            return
        }
        quantity = newQuantity
    }
    
    // –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    mutating func increaseQuantity(by amount: Int) {
        guard amount > 0 else { return }
        quantity += amount
    }
}

// ShoppingCart Class
// ShoppingCart ‚Äî —ç—Ç–æ –∫–ª–∞—Å—Å (–∏—Å–ø–æ–ª—å–∑—É–µ–º class, –ø–æ—Ç–æ–º—É —á—Ç–æ –∫–æ—Ä–∑–∏–Ω–∞ ‚Äî —ç—Ç–æ reference type)
class ShoppingCart {
    private(set) var items: [CartItem] = []   // –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤
    var discountCode: String?                 // –∫–æ–¥ —Å–∫–∏–¥–∫–∏
    
    // –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    func addItem(product: Product, quantity: Int = 1) {
        if let index = items.firstIndex(where: { $0.product.id == product.id }) {
            var existingItem = items[index]
            existingItem.increaseQuantity(by: quantity)
            items[index] = existingItem
        } else {
            let newItem = CartItem(product: product, quantity: quantity)
            items.append(newItem)
        }
    }
    
    // –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
    func removeItem(productId: String) {
        items.removeAll { $0.product.id == productId }
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    func updateItemQuantity(productId: String, quantity: Int) {
        guard let index = items.firstIndex(where: { $0.product.id == productId }) else { return }
        if quantity == 0 {
            removeItem(productId: productId)
        } else {
            var item = items[index]
            item.updateQuantity(quantity)
            items[index] = item
        }
    }
    
    // –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
    func clearCart() {
        items.removeAll()
    }
    
    // –°—É–º–º–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
    var subtotal: Double {
        return items.reduce(0) { $0 + $1.subtotal }
    }
    
    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∫–∏–¥–∫—É
    var discountAmount: Double {
        guard let code = discountCode else { return 0 }
        switch code {
        case "SAVE10": return subtotal * 0.10
        case "SAVE20": return subtotal * 0.20
        default: return 0
        }
    }
    
    // –û–±—â–∞—è —Å—É–º–º–∞ —Å —É—á—ë—Ç–æ–º —Å–∫–∏–¥–∫–∏
    var total: Double {
        return subtotal - discountAmount
    }
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
    var itemCount: Int {
        return items.reduce(0) { $0 + $1.quantity }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç–∞—è –ª–∏ –∫–æ—Ä–∑–∏–Ω–∞
    var isEmpty: Bool {
        return items.isEmpty
    }
}

// Address Structure
// Address —Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
struct Address {
    let street: String
    let city: String
    let zipCode: String
    let country: String
    
    var formattedAddress: String {
        return "\(street)\n\(city), \(zipCode)\n\(country)"
    }
}

// Order Structure
// Order —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä–∑–∏–Ω—ã
struct Order {
    let orderId: String
    let items: [CartItem]
    let subtotal: Double
    let discountAmount: Double
    let total: Double
    let timestamp: Date
    let shippingAddress: Address
    
    init(from cart: ShoppingCart, shippingAddress: Address) {
        self.orderId = UUID().uuidString
        self.items = cart.items
        self.subtotal = cart.subtotal
        self.discountAmount = cart.discountAmount
        self.total = cart.total
        self.timestamp = Date()
        self.shippingAddress = shippingAddress
    }
    
    var itemCount: Int {
        return items.reduce(0) { $0 + $1.quantity }
    }
}

// Test Scenario
print("üõí Shopping Cart System Test Started\n")

// –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–¥—É–∫—Ç—ã
let laptop = Product(name: "MacBook Air", price: 1200, category: .electronics, description: "Apple laptop")
let book = Product(name: "Swift Programming", price: 45, category: .books, description: "Learn Swift language")
let headphones = Product(name: "AirPods", price: 250, category: .electronics, description: "Wireless earbuds")

// –°–æ–∑–¥–∞—ë–º –∫–æ—Ä–∑–∏–Ω—É
let cart = ShoppingCart()
cart.addItem(product: laptop, quantity: 1)
cart.addItem(product: book, quantity: 2)
cart.addItem(product: laptop, quantity: 1) // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—É—Ç–±—É–∫–æ–≤

print("Subtotal: \(cart.subtotal)")
print("Item count: \(cart.itemCount)")

cart.discountCode = "SAVE10"
print("Total with discount: \(cart.total)")

// –£–¥–∞–ª—è–µ–º –∫–Ω–∏–≥—É
cart.removeItem(productId: book.id)
print("After removing book, items left: \(cart.itemCount)")

// –ü—Ä–æ–≤–µ—Ä–∫–∞ Reference Type
func modifyCart(_ cart: ShoppingCart) {
    cart.addItem(product: headphones, quantity: 1)
}
modifyCart(cart)
print("After external modification, item count: \(cart.itemCount)")

// –ü—Ä–æ–≤–µ—Ä–∫–∞ Value Type
var item1 = CartItem(product: laptop, quantity: 1)
var item2 = item1
item2.updateQuantity(5)
print("item1 quantity: \(item1.quantity), item2 quantity: \(item2.quantity)")

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
let address = Address(street: "Main Street 10", city: "Almaty", zipCode: "050000", country: "Kazakhstan")
let order = Order(from: cart, shippingAddress: address)

cart.clearCart()
print("Order items count: \(order.itemCount)")
print("Cart items count: \(cart.itemCount)")

print("\nOrder created at \(order.timestamp)")
print("Shipping to:\n\(order.shippingAddress.formattedAddress)")
